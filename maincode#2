#include <iostream>
#include <fstream>//input output read write file operations
#include <vector>
#include<utility>
using namespace std;



int main()
{
    //opening the csv file
    ifstream ip("/Users/onyan/OneDrive/Documents/teams_csvFile.csv");
    if(!ip.is_open()) cout<<"error" <<endl;


    string Teamname;
    string Localtown;
    string Teamstadium;

    while(ip.good())//runs until we get all data from the file
    {
        getline(ip,Teamname,',');
        getline(ip,Localtown,',');
        getline(ip,Teamstadium,'\n');
        cout<<"Team name-"<<Teamname<<"\n";
        cout<<"Local town- "<<Localtown<<"\n";
        cout<<"Team stadium-"<<Teamstadium<<"\n";
        cout<<"......................"<<"\n";
    }

    ip.close();//function to close the file
    //data structure to store information about the teams
    vector<string>team_names={"Cklein Starts","Wolves FC","Dolphins FC","Sea Horses FC","Sharks United","Lake Basin FC","Thika United","Mavuno Comrades FC","Nakuru FC","Ostrich Associates"};
    vector<string>local_town={"Nairobi","Nairobi","Mombasa","Mombasa","Kisumu","Kisumu","Thika","Thika","Nakuru","Nakuru"};
    vector<string>team_stadium={"Cklein Arena","Wolves","Dolphins","SHorses Arena","Sharks Field","LBasin","Thika Field","Vuno Grounds","Nakuru Field","OAssociates"};
    // Function to generate fixtures
void generateFixtures(vector<Match>& fixtures) {
    int weekend = 1;
    
    // First, schedule cross-town matches i.e teams from different towns
        for (int i = 0; i < 5; ++i) {
        for (int j = 5; j < 10; ++j) {
            fixtures.push_back({teams[i], teams[j], stadiums[i], towns[i], 1, weekend});
            fixtures.push_back({teams[j], teams[i], stadiums[j], towns[j], 2, weekend + 5});

            if (fixtures.size() % 2 == 0) {
                weekend++;
            }
        }
    }
}
// Local town matches
for (int i = 0; i < 5; ++i) {
for (int j = i + 1; j < 5; ++j) {
fixtures.push_back({teams[i], teams[j], stadiums[i], towns[i], 1, weekend});
  fixtures.push_back({teams[j], teams[i], stadiums[j], towns[j], 2, weekend + 5});

  fixtures.push_back({teams[i + 5], teams[j + 5], stadiums[i + 5], towns[i + 5], 1, weekend});
            
fixtures.push_back({teams[j + 5], teams[i + 5], stadiums[j + 5], towns[j + 5], 2, weekend + 5});
  if (fixtures.size() % 2 == 0) {
                weekend++;
           }
      }
}
}
